<?php

/**
 * @author hetao fanbin
 */
class message_db{
	public static function InitDB($dbname="db_message",$dbtype="main") {
		redis_api::useConfig($dbname);
		$db = new SDb();
		$db->useConfig($dbname, $dbtype);
		return $db;
	}

	function addSetting($data){
        $db = self::InitDB("db_message");
		$key = md5("message_db.t_message_settting.".$data->fk_plan);
		$v = redis_api::get($key);
		if($v){
			$v["text_pattern"] = $data->text_pattern;
			redis_api::set($key, $v, 7200);
		}
		$table = array("t_message_setting");
		$condition = "fk_plan=$data->fk_plan";
		$item = array("text_pattern"=>$data->text_pattern);
		$ret = $db->update($table, $condition, $item);
		if($ret){
			return $ret;
		}
		return $db->insert($table, $data);
	}
	public function getSetting($fk_plan){
        $db = self::InitDB("db_message","query");
		$key = md5("message_db.t_message_settting.$fk_plan");
		$v = redis_api::get($key);
		if($v){
			return $v;
		}
		$item = new stdclass;
		$item->set_id = "pk_set";
		$item->plan_id = "fk_plan";
		$item->text_pattern = "text_pattern";
		$table = array("t_message_setting");
		$condition = "fk_plan=$fk_plan";
		$v = $db->selectOne($table, $condition, $item);
		if(!$v){
			$v = array("plan_id"=>$fk_plan, "text_pattern"=>"normal");
		}
		redis_api::set($key, $v, 7200);
		return $v;
	}
	public function addInstation($data){
		$table = array("t_instation");
        $db = self::InitDB("db_message");
		$ret = $db->insert($table, $data);
		$key =md5( "message_db.t_instation.ct.v2.".$user);
		$v = redis_api::del($key);
		return $ret;
	}
	public function updateInstation($msgId, $user){
		$table = array("t_instation");
		$condition = "pk_msg_id=$msgId and fk_user_to=$user";
		$item = array("status"=>"readed");
        $db = self::InitDB("db_message");
		$ret = $db->update($table, $condition, $item);
		$key =md5( "message_db.t_instation.ct.v2.".$user);
		$v = redis_api::del($key);
		return $ret;
	}
	public function deleteInstation($msgId, $user){
		$table = array("t_instation");
		$condition = "pk_msg_id=$msgId and fk_user_to=$user";
        $db = self::InitDB("db_message");
		return $db->delete($table, $condition);
	}
	public function getInstation($user, $limit, $page, $type){
		$table = array("t_instation");
		$item = new stdclass;
		$item->msg_id = "pk_msg_id";
		$item->user_from_id = "fk_user_from";
		$item->user_to_id = "fk_user_to";
		$item->title = "title";
		$item->content = "content";
		$item->status = "status";
		$item->insert_time = "insert_time";
		$condition = "fk_user_to=$user";
		if("all" != $type){
			$condition .= " and status='$type'";
		}
		$orderby = "pk_msg_id desc";
        $db = self::InitDB("db_message","query");
		$db->setLimit($limit);
		$db->setPage($page);
		$db->setCount(true);
		$data = $db->select($table, $condition, $item, "", $orderby);
		return $data;
	}
	public function getUnreadInstation($user){
        $db = self::InitDB("db_message","query");
		$key =md5( "message_db.t_instation.ct.v2.".$user);
		$v = redis_api::get($key);
		if($v!==false){return $v;}
		$item = new stdclass;
		$item->total = "count(1)";
		$table = array("t_instation");
		$condition = "fk_user_to=$user and status='unread'";
		$v = $db->selectOne($table, $condition, $item);
		if(!$v)$v=0;
		redis_api::set($key,$v,600);
		return $v;
	}
	public function addText($params){
        $db = self::InitDB("db_message");
		$data = new stdclass;
		$data->fk_user_from = $params->user_from_id;
		if(!empty($params->user_to_id)){
			$data->fk_user_to = $params->user_to_id;
		}else{
			$data->fk_user_to = 0;
		}
		$data->fk_plan = $params->plan_id;
		$data->type = $params->type;
		$data->content = $params->content;
		if(!empty($params->live_second)){
			$data->live_second = $params->live_second;
		}else{
			$data->live_second = 0;
		}
		$table = array("t_message_text");
		$ret = $db->insert($table, $data);
		return $ret;
	}
	public function addGood($params){
        $db = self::InitDB("db_message");
		$data = new stdclass;
		$data->fk_user = $params->user_to_id;
		$data->fk_plan = $params->plan_id;
		$data->type = $params->type;
		$table = array("t_message_good");
		$ret = $db->insert($table, $data);
		return $ret;
	}
	/*public function addSignal($params){
		return false;
        $db = self::InitDB("db_message","query");
		$data = new stdclass;
		$data->fk_user_from = $params->user_from_id;
		$data->user_from_token = $params->user_from_token;
		if(!empty($params->user_to_id)){
			$data->fk_user_to = $params->user_to_id;
		}
		if(!empty($params->user_to_token)){
			$data->user_to_token = $params->user_to_token;
		}
		$data->fk_plan = $params->plan_id;
		$data->type = $params->type;
		$data->content = $params->content;
		$key = md5("message_db.t_message_signal.$params->plan_id");
		$v = array("msg_id"=>0, "user_from_id"=>$params->user_from_id, "user_from_token"=>$params->user_from_token, "plan_id"=>$params->plan_id, "type"=>$params->type, "content"=>$params->content, "last_updated"=>0);
		if(!empty($params->user_to_id)){
			$v["user_to_id"] = $params->user_to_id;
		}else{
			$v["user_to_id"] = 0;
		}
		if(!empty($params->user_to_token)){
			$v["user_to_token"] = $params->user_to_token;
		}else{
			$v["user_to_token"] = "";
		}
		$ret = redis_api::rPushx($key, $v);
		if(!$ret){
			$this->getSignal($params->plan_id, 0);
			return 0;
		}
		redis_api::expireAt($key, time(null)+18000);
		//$table = array("t_message_signal");
		//$db->insert($table, $data, true);
		//$ret = $db->execute("select last_insert_id() as id");
		//return $ret[0]["id"];
		return $ret;
	}*/
	public function getText($plan_id, $msg_start){
        $db = self::InitDB("db_message","query");
		$item = new stdclass;
		$item->msg_id = "pk_msg_text";
		$item->user_from_id = "fk_user_from";
		$item->user_to_id = "fk_user_to";
		$item->plan_id = "fk_plan";
		$item->type = "type";
		$item->content = "content";
		$item->live_second = "live_second";
		$item->last_updated = "last_updated";
		$table = array("t_message_text");
		$condition = "pk_msg_text>$msg_start and fk_plan=$plan_id and status=0";
		$v = $db->select($table, $condition, $item, "", "pk_msg_text");
		/*if(empty($v->items)){
			$v->items = array();
			$v->items[] = array("msg_id"=>1, "user_from_id"=>0, "type"=>0, "plan_id"=>$plan_id, "content"=>"", "user_to_id"=>0);
		}*/
		return $v->items;
	}
	public function getSignal($plan_id, $msg_start){
		return false;
        $db = self::InitDB("db_message","query");
		$key = md5("message_db.t_message_signal.$plan_id");
		$v = redis_api::lRange($key, $msg_start, -1);
		if($v){
			$i = (int)$msg_start;
			foreach($v as $k=>&$item){
				$item["msg_id"] = ++$i;
			}
		}
		if($v || $msg_start > 0){
			return $v;
		}
		$key2 = md5("message_db.t_message_signal.$plan_id.atom");
		$ret = redis_api::set($key2, 1, array('nx', 'ex'=>2));
		if(!$ret){
			return $v;
		}
		/*$item = new stdclass;
		$item->msg_id = "pk_msg_signal";
		$item->user_from_id = "fk_user_from";
		$item->user_from_token = "user_from_token";
		$item->user_to_id = "fk_user_to";
		$item->user_to_token = "user_to_token";
		$item->plan_id = "fk_plan";
		$item->type = "type";
		$item->content = "content";
		$item->last_updated = "last_updated";
		$table = array("t_message_signal");
		$condition = "pk_msg_signal>$msg_start and fk_plan=$plan_id and status=0";
		$v = $db->select($table, $condition, $item, "", "pk_msg_signal");*/
		//if(empty($v->items)){
			$v = new stdclass;
			$v->items = array();
			$v->items[] = array("msg_id"=>1, "user_from_id"=>0, "user_from_token"=>"", "type"=>0, "plan_id"=>$plan_id, "content"=>"", "user_to_id"=>0, "user_to_token"=>"");
		//}	
		$ret = redis_api::rPush($key, $v->items);
		redis_api::expireAt($key, time(null)+18000);
		//var_dump(redis_api::getLastError());
		//var_dump($ret);
		return $v->items;
	}
	public function getGood($plan_id, $msg_start){
        $db = self::InitDB("db_message","query");
		$item = new stdclass;
		$item->msg_id = "pk_msg_good";
		$item->user_id = "fk_user";
		$item->plan_id = "fk_plan";
		$item->type = "type";
		$item->num = "num";
		$item->last_updated = "last_updated";
		$table = array("t_message_good");
		$condition = "pk_msg_good>$msg_start and fk_plan=$plan_id and status=0";
		$v = $db->select($table, $condition, $item, "", "pk_msg_good");
		/*if(empty($v->items)){
			$v->items = array();
			$v->items[] = array("msg_id"=>1, "user_id"=>0, "type"=>0, "plan_id"=>$plan_id, "num"=>0);
		}*/
		return $v->items;
	}

}
?>

