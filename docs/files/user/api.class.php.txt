<?php
class user_api{

	const USER_NAME_MAX = 20;
	const USER_NAME_MIN = 2;
	const USER_PWD_MAX = 16;
	const USER_PWD_MIN = 6;

	private static $gender = array('male', 'female');
	private static $status = array('normal', 'disabled');
	private static $site = array(1, 2);
	
	private static $func_list = array(
		'name' => 'checkUserName',			
		'gender' => 'checkGender',			
		'status' => 'checkStatus',			
		'password' => 'checkPassword',			
		'mobile' => 'checkMobile',			
		'email' => 'checkEmail',			
		'birthday' => 'checkBirthday',			
		'site' => 'checkSite',			
	);
	
	private static $user_resource = array(
		'uid' => '',
		'name' => '',	
		'birthday' => '',	
		'site' => 1,	
		'gender' => '',	
		'status' => 'normal',	
		'mobile' => '',	
		'email' => '',	
		'register_ip' => '',	
		'create_time' => '',	
		'last_updated' => '',	
		'avatar' => array(
			'large' => '',	
			'medium' => '',	
			'small' => '',	
		),
		'types' => array(
			'student' => false,
			'teacher' => false,
			'organization' => false,
		),	
		'profile' => array(
			'real_name' => '',
			'address' => '',
			'birth_place' => '',
			'desc' => '',
			'zip_code' => '',
		),	
	);

	private static $user_resmp = array(
		'basic' => array(
			'uid' => 'pk_user',	
			'name' => 'name',	
			'birthday' => 'birthday',	
			'site' => 'site',	
			'email' => 'email',	
			'mobile' => 'mobile',	
			'register_ip' => 'register_ip',	
			'create_time' => 'create_time',	
			'last_updated' => 'last_updated',	
			'gender' => array(1 => 'male', 2=> 'female',),	
			'status' => array(1 => 'normal', 2 => 'disabled',),	
		),
		'parterner' => array(
			'source' => 'source',	
			'uid' => 'parterner_uid',	
			'thumb_url' => 'thumb_url',	
			'auth_code' => 'auth_code',	
		),
		'avatar' => array(
			'large' => 'thumb_big',	
			'medium' => 'thumb_med',	
			'small' => 'thumb_small',	
		),
		'mobile' => array(
			'mobile_supplier' => 'supplier',	
			'mobile_province' => 'province',	
			'mobile_city' => 'city',	
		),
		'profile' => array(
			'real_name' => 'real_name',
			'address' => 'address',
			'birth_place' => 'birth_place',
			'desc' => 'desc',
			'zip_code' => 'zip_code',
		),	
		'teacher' => array(
			'title' => 'title',
			'college' => 'college',
			'years' => 'years',
			'diploma' => 'diploma',
		),	
	);

	private static $grade_mp = array(
		1001 => '小学一年级',
		1002 => '小学二年级',
		1003 => '小学三年级',
		1004 => '小学四年级',
		1005 => '小学五年级',
		1006 => '小学六年级',
		2001 => '初中一年级',
		2002 => '初中二年级',
		2003 => '初中三年级',
		3001 => '高中一年级',
		3002 => '高中二年级',
		3003 => '高中三年级',
	);

	private static	$array_org_list = array(
		"fk_user_owner"=>"user_owner_id",
		"pk_org"=>"oid",
		"name"=>"name",
		"thumb_big"=>"thumb_big",
		"thumb_med"=>"thumb_med",
		"thumb_small"=>"thumb_small",
		"desc"=>"desc",
		"status"=>"status",
		"create_time"=>"create_time",
		"last_updated"=>"last_updated",
	);
	public static function encryptPassword($password){
		return md5($password."GN100".md5($password));
	}

	/**
	 * 获取用户信息
	 * @param int $uid 用户ID
	 * @return boolean|array
	 */
	public function get($uid){
		if (empty($uid) || !is_int($uid)) {
			return false;		
		}
		$user_db = new user_db;
		$basic_data = $user_db->getUser($uid);
		if (empty($basic_data)) {
			return array(
				"code" => '-102',
				"msg" => 'the user does not exist',
			);	
		}
		$user = self::$user_resource;
		foreach (self::$user_resmp['basic'] as $k => $v) {
			if (is_array($v)) {
				if (isset($v[$basic_data[$k]])) {
					$user[$k] = $v[$basic_data[$k]];
				}
			} else {
				if (isset($basic_data[$v])) {
					$user[$k] = $basic_data[$v];
				}
			}
		}
		if (!empty($basic_data['type']) && $basic_data['type'] & 0x01) {
			$user['types']['student'] = true;
		}
		if (!empty($basic_data['type']) && $basic_data['type'] & 0x02) {
			$user['types']['teacher'] = true;
		}
		if (!empty($basic_data['type']) && $basic_data['type'] & 0x04) {
			$user['types']['organization'] = true;
		}
		if($user['types']['student']){
			$user['student']=user_db::getStudentProfile($uid);
		}
		if($user['types']['teacher']){
			$user['teacher']=user_db::getTeacherProfile($uid,false);
		}
		if($user['types']['organization']){
			$user['organization']=user_db::getOrgByUid($uid,false);
		}
		foreach (self::$user_resmp['avatar'] as $k => $v) {
			$user['avatar'][$k] = $basic_data[$v];
		}
		$email_data = user_db::getUserEmailByID($uid);
		if (!empty($email_data['email'])) {
			$user['email'] = $email_data['email'];
		}
		$mobile_data = user_db::getUserMobileByID($uid);
		if (!empty($mobile_data['mobile'])) {
			$user['mobile'] = $mobile_data['mobile'];
		}
		$profile_data = user_db::getUserProfileByID($uid);
		if (!empty($profile_data)) {
			foreach (self::$user_resmp['profile'] as $k => $v) {
				if (!isset($profile_data[$k])) {
					continue;
				}
				$user['profile'][$k] = $profile_data[$v];
			}
		}
		return $user;
	}

	public function search($params){
		if (isset($params['email']) || isset($params['mobile'])) {
			if (isset($params['email'])) {
				$uid = 	user_db::getUserIDByEmail($params['email']);
			} else {
				$uid = 	user_db::getUserIDByMobile($params['mobile']);
			}
			$user = user_db::getUser($uid);
			if (empty($user)) {
				return array('result' => array(
					"code" => '-102',
					"msg" => 'the user does not exist',
				));
			}
			$ret = $this->formatUserList($user);
			return array(
				'data' => array($ret),	
				'page' => 1, 'size' => 1, 'total' => 1,
			);
		} else if (isset($params['grade'])) {
			$grade = empty($params['grade']) ? "" : $params['grade'];
			$page = empty($params['page']) ? 1 : $params['page'];
			$length = empty($params['length']) ? 20 : $params['length'];
			$user_list = $this->getlistByGrade((int)$grade, $page, $length);
			if (empty($user_list)) {
				return array('result' => array(
					"code" => '-202',
					"msg" => 'empty data',
				));
			}
			return $user_list;
		} else if (isset($params['type'])) {
			$page = empty($params['page']) ? 1 : $params['page'];
			$length = empty($params['length']) ? 20 : $params['length'];
			$user_list = $this->getlistByType($params['type'], $page, $length);
			if (empty($user_list)) {
				return array('result' => array(
					"code" => '-202',
					"msg" => 'empty data',
				));
			}
			return $user_list;
		}
		return array('result' => array(
			"code" => '-101',
			"msg" => 'invalid parameter',
		));
	}

	/**
	 * 更新用户信息
	 * @param int $uid 用户ID
	 * @param array $data 用户数据
	 * @return boolean|array 
	 */
	public function update($uid, $data){
		if (empty($uid) || !is_int($uid) || empty($data)) {
			return array(
				"code" => '-101',
				"msg" => 'invalid parameter',
			);	
		}
		$user = user_db::getUser($uid);
		$mobile_data = user_db::getUserMobileByID($uid);
		$email_data = user_db::getUserEmailByID($uid);
		if (empty($user)) {
			return array(
				"code" => '-102',
				"msg" => 'the user does not exist',
			);	
		}
		$ret = $this->check($data);
		if ($ret !== true) {
			return $ret;	
		}
		if (isset($data['email']) && !empty($email_data['email']) &&
			$email_data['email'] != $data['email'] &&
		   	!empty(user_db::getUserIDByEmail($data['email']))) {
			return array(
				"code" => '-102',
				"msg" => 'the email has been registered',
			);	
		}
		if (isset($data['mobile']) && !empty($mobile_data['mobile']) &&
			$mobile_data['mobile'] != $data['mobile'] &&
		   	!empty(user_db::getUserIDByMobile($data['mobile']))) {
			return array(
				"code" => '-103',
				"msg" => 'the mobile has been registered',
			);	
		}
		$basic_update = $this->parseBasic($data);
		if (isset($data['types'])) {
			$type = $this->parseTypes($user['type'], $data['types']);
			if ($type !== false) {
				$basic_update['type']  = $type;
			}
		}
		if ($basic_update == false) {
			$basic_update=array();
		}

		if (!empty($basic_update['password'])) {
			$basic_update['password'] = self::encryptPassword($basic_update['password']);
		}

		$ret = false;
		if (!empty($data['mobile'])) {
			if (empty($mobile_data)) {
				$ret = user_db::addUserMobile(array('fk_user' => $uid,'mobile'=>$data['mobile']));
			} else {
				$ret = user_db::updateUserMobile($uid, array('mobile'=>$data['mobile']));
			}	
		}
		if (!empty($data['email'])) {
			if (empty($email_data)) {
				$ret = user_db::addUserEmail(array('fk_user' => $uid,'email'=>$data['email']));
			} else {
				$ret = user_db::updateUserEmail($uid, array('email'=>$data['email']));
			}	
		}
		if (isset($data['profile'])) {
			$profile_update = $this->parseProfile($data['profile']);
			if ($profile_update != false) {
				if (!empty(user_db::getUserProfile($uid))) {
					$ret = user_db::updateUserProfile($uid, $profile_update);
				} else {
					$profile_update['fk_user'] = $uid;
					$ret = user_db::addUserProfile($profile_update);
				}
			}
		}
		if(!empty($basic_update)){
			$ret = user_db::updateUser($uid, $basic_update);
		}
		return $ret!==false;
	}

	/**
	 * 获取用户列表
	 * @param int $page 页数
	 * @param int $length 每页数据
	 * @return boolean|array
	 */
	public function getlist($page = 1, $length = 20){
		$ret = user_db::listUser($page, $length);
		if (empty($ret->items)) {
			return false;	
		}
		foreach ($ret->items as $user) {
			$user_list1[] = $this->formatUserList($user);
		}	
			$user_list=$user_list1;
		$zxcity = array("北京","上海","重庆","天津"); 
		foreach($user_list1 as $key=>$v){	
			if(empty($v["mobile_province"])) $v["mobile_province"]="暂无";
			if(empty($v["mobile_city"])) $v["mobile_city"]="暂无";
			if(in_array($key["mobile_province"],$zxcity)){
				$user_list[$key]["mobile_city"] = $v["mobile_province"];
				$user_list[$key]["mobile_province"] = $v["mobile_province"];
			}else{
				$user_list[$key]["mobile_province"] = $v["mobile_province"];
				$user_list[$key]["mobile_city"] = $v["mobile_city"];
			}
		}	

		$data = array(
			'page' => $ret->page,
			'size' => $ret->pageSize,
			'total' => $ret->totalPage,
			'data' => $user_list,
		);
		return $data;
	}

	public function getlistByGrade($grade, $page = 1, $length = 20){
		$ret = user_db::listUserByGrade($grade, $page, $length);
		if (empty($ret->items)) {
			return false;	
		}
		foreach ($ret->items as $user) {
			$user_list[] = $this->formatUserList($user);
		}
		$data = array(
			'page' => $ret->page,
			'size' => $ret->pageSize,
			'total' => $ret->totalPage,
			'data' => $user_list,
		);
		return $data;
	}
	
	private function getlistByType($type, $page = 1, $length = 20){
		if ($type == 'teacher') {
			$ret = user_db::listTeacher($page, $length);
		} else if ($type == 'organization') {
			$ret = user_db::listOrganization($page, $length);
		} else if ($type == 'student') {
			$ret = user_db::listStudent($page, $length);
		}
		if (empty($ret) || empty($ret->items)) {
			return false;	
		}
		foreach ($ret->items as $user) {
			$r = $this->formatUserList($user);
			$user_list[] = $r;
		}
		$data = array(
			'page' => $ret->page,
			'size' => $ret->pageSize,
			'total' => $ret->totalPage,
			'data' => $user_list,
		);
		return $data;
	}
	/**
	 * 格式化用户数据
	 * @param array $data
	 */
	private function formatUserList($data){
		if (empty($data)) {
			return false;	
		}
		$user = self::$user_resource;
		$basic = $this->getDataByMP(self::$user_resmp['basic'], $data);
		if (!empty($basic)) {
			$user = array_merge($user, $basic);
		}
		$user['avatar']= $this->getDataByMP(self::$user_resmp['avatar'], $data);
		$mobile_info = $this->getDataByMP(self::$user_resmp['mobile'], $data);
		if (!empty($mobile_info)) {
			$user = array_merge($user, $mobile_info);
		}
		if (!empty($data['type']) && $data['type'] & 0x01) {
			$user['types']['student'] = true;
		}
		if (!empty($data['type']) && $data['type'] & 0x02) {
			$user['types']['teacher'] = true;
			$teacher= $this->getDataByMP(self::$user_resmp['teacher'], $data);
			if (!empty($teacher)) {
				$user['teacher'] = $teacher;
			}
		}
		if (!empty($data['type']) && $data['type'] & 0x04) {
			$user['types']['organization'] = true;
		}
		if (isset($data['grade']) && !empty(self::$grade_mp[$data['grade']]) ) {
			$user['grade'] = self::$grade_mp[$data['grade']];
		}
		$parterner = $this->getDataByMP(self::$user_resmp['parterner'], $data);
		if (!empty($parterner)) {
			$user['parterner'] = $parterner;
		}

		unset($user['profile']);
		return $user;
	}

	private function getDataByMP($mp, $data){
		$ret = array();
		if (empty($data) || empty($mp) ||
			!is_array($data) || !is_array($mp)) {
			return $ret;
		}
		foreach ($mp as $k => $v) {
			if (is_array($v)) {
				if (isset($v[$data[$k]])) {
					$ret[$k] = $v[$data[$k]];
				}
			} else {
				if (isset($data[$v])) {
					$ret[$k] = $data[$v];
				}
			}
		}
		return $ret;
	}

	/**
	 * 解析基本信息
	 * @param array $data 基本信息
	 * @return 
	 */
	private function parseBasic($data){
		if (empty($data)) {
			return false;	
		}
		$mp = array(
			'name' => 'name',	
			'password' => 'password',	
			'birthday' => 'birthday',	
			'site' => 'site',	
			'gender' => array('male' => 1,'female' => 2,),	
			'status' => array('normal' => 1,'disabled' => 2,),	
		);
		$update = array();	
		foreach ($mp as $k => $v) {
			if (isset($data[$k])) {
				if (is_array($v)) {
					if (isset($v[$data[$k]])) {
						$update[$k]	= $v[$data[$k]];
					}
				} else {
					if (isset($data[$v])) {
						$update[$k]	= $data[$v];
					}
				}
			}
		}
		if (isset($data['avatar'])) {
			$avatar = $this->parseAvatar($data['avatar']);
			if ($avatar !== false) {
				$update = array_merge($update, $avatar);
			}
		}
		if (empty($update)) {
			return false;	
		}
		return $update;
	}

	/**
	 * 解析用户详细信息
	 * @param array $profile 详细信息
	 * @return boolean|array 
	 */
	private function parseProfile($profile){
		if (empty($profile)) {
			return false;	
		}
		$mp = array(
			'real_name' => 'real_name',	
			'address' => 'address',	
			'birth_place' => 'birth_place',	
			'desc' => 'desc',	
			'zip_code' => 'zip_code',	
		);
		$update = array();
		foreach ($mp as $k => $v) {
			if (isset($profile[$k])) {
				$update[$v]	= $profile[$k];
			}
		}
		if (empty($update)) {
			return false;	
		}
		return $update;
	}

	/**
	 * 解析用户类型
	 * @param array $types 用户类型
	 * @return boolean|array false解析失败 array更新数据
	 */
	private function parseTypes($utype, $types){
		if (empty($types)) {
			return false;	
		}
		$mp = array(
			'student' => 0x01,
			'teacher' => 0x02,
			'organization' => 0x04,
		);
		foreach ($types as $k => $v) {
			if (isset($mp[$k])) {
				$utype = $v ? ($utype | $mp[$k]) : ($utype & ~$mp[$k]); 
			}
		}
		return $utype;
	}

	/**
	 * 解析头像参数
	 * @param array $avatar  头像大中小
	 * @return boolean|array false解析失败 array更新数据
	 */
	private function parseAvatar($avatar){
		if (empty($avatar)) {
			return false;	
		}
		$mp = array(
			'large' => 'thumb_big',	
			'medium' => 'thumb_med',	
			'small' => 'thumb_small',	
		);
		$update = array();
		foreach ($mp as $k => $v) {
			if (isset($avatar[$k])) {
				$update[$v] = $avatar[$k];
			}
		}
		if (empty($update)) {
			return false;	
		}
		return $update;	
	}

	/**
	 * 校验用户信息是否正确
	 * @param arry $data 用户信息
	 * @return boolean|array true表示正确，否则返回error array
	 */
	public function check($data){
		foreach (self::$func_list as $name => $func) {
			if (isset($data[$name])) {
				$ret = $this->$func($data[$name]);	
				if ($ret !== true) {
					return $ret;	
				}
			}
		}
		return true;
	}

	/**
	 * 校验用户名
	 * @param string $name 用户名
	 * @return boolean|array true表示正确，否则返回error
	 */
	private function checkUserName($name){
		$regex = '/^[_\w\d\x{4e00}-\x{9fa5}]+/iu';
		if (empty(trim($name))) {
			return array(
				"code"	=> '111',
				"msg"	=> 'the username can not empty',
			);	
		}
		//验证是否合法
		if (!preg_match($regex, $name)) {
			return array(
				"code"	=> '112',
				"msg"	=> 'invalid username ',
			);	
		}
		//验证最小长度
		if (mb_strlen($name, 'UTF-8') < self::USER_NAME_MIN) {
			return array(
				"code"	=> '113',
				"msg"	=> 'the username at least 2 word',
			);	
		}
		//最大长度
		if (mb_strlen($name, 'UTF-8') > self::USER_NAME_MAX) {
			return array(
				"code"	=> '114',
				"msg"	=> 'the username at most 10 word',
			);	
		}
		return true;
	}

	/**
	 * 验证密码是否正确
	 * @param string $password 用户密码
	 * @return boolean|array  ture表示正确,否则返回error array
	 */
	private function checkPassword($password){
		$regex = '/^[\\~!@#$%^&*()-_=+|{}\[\],.?\/:;\'\"\d\w]+$/';
		if (empty(trim($password))) {
			return array(
				"code"	=> '121',
				"msg"	=> 'password can not empty',
			);	
		}
		//校验密码是否合法
		if (!preg_match($regex, $password)) {
			return array(
				"code"	=> '122',
				"msg"	=> 'invalid password ',
			);	
		}
		//最小长度
		if (mb_strlen($password, 'UTF-8') < self::USER_PWD_MIN) {
			return array(
				"code"	=> '123',
				"msg"	=> 'the password at least 6 word',
			);	
		}
		//最大长度
		if (mb_strlen($password, 'UTF-8') > self::USER_PWD_MAX) {
			return array(
				"code"	=> '124',
				"msg"	=> 'the password at most 16 word',
			);	
		}
		return true;
	}
	
	/**
	 * 验证状态是否正确
	 * @param string $status 用户状态
	 * @return boolean|array  ture表示正确,否则返回error array
	 */
	private function checkStatus($status){
		if (!empty($status) && !in_array($status,
			self::$status)) {
			return array(
				"code"	=> '131',
				"msg"	=> 'invalid status parameter',
			);	
		}
		return true;
	}

	/**
	 * 验证性别是否正确
	 * @param string $gender 用户性别
	 * @return boolean|array  ture表示正确,否则返回error array
	 */
	private function checkGender($gender){
		if (!empty($gender) && !in_array($gender,
			self::$gender)) {
			return array(
				"code"	=> '141',
				"msg"	=> 'invalid gender parameter',
			);	
		}
		return true;
	}

	/**
	 * 验证手机号是否正确
	 * @param string $mobile 用户手机
	 * @return boolean|array  ture表示正确,否则返回error array
	 */
	private function checkMobile($mobile){
		$regex = '/^(13\d{9})|(15\d{9})|(18\d{9})$/';
		if (!empty(trim($mobile)) &&
		   	!preg_match($regex, $mobile)) {
			return array(
				"code"	=> '151',
				"msg"	=> 'invalid mobile parameter',
			);	
		}
		return true;
	}

	/**
	 * 验证邮箱是否正确
	 * @param string $email 用户邮箱
	 * @return boolean|array  ture表示正确,否则返回error array
	 */
	private function checkEmail($email){
		$regex = '/^[\w\d]+[\w\d-.]*@[\w\d-.]+\.[\w\d]{2,10}$/i';
		if (!empty(trim($email)) &&
		   	!preg_match($regex, $email)) {
			return array(
				"code"	=> '161',
				"msg"	=> 'invalid mobile parameter',
			);	
		}
		return true;
	}

	private function checkSite($site){
		if (!empty($site) && !in_array($site,
			self::$site)) {
			return array(
				"code"	=> '171',
				"msg"	=> 'invalid site parameter',
			);	
		}
		return true;
	}

	private function checkBirthday($birthday){
		if (!empty($birthday) && empty(strtotime($birthday))) {
			return array(
				"code"	=> '181',
				"msg"	=> 'invalid birthday parameter',
			);	
		}
		return true;	
	}
	/*
	 *获取机构信息 
	 *				$oid    机构id  
	 *				$page   页数
	 *				$length 每页显示个数
	 * TODO
	 */
	public function getlistorg($uid = null,$page = null,$length = null){
		$user_db = new user_db();
		$list_org1 = $user_db->listorg($uid,$page,$length);
		$list_org = $list_org1->items;
		if($listorg === false) return false;	
		$count = count($listorg);
		for($i = 0;$i<$count;$i++){
			$relist[$i]["org_id"]=  	$listorg[$i]["pk_org"];
			$relist[$i]["user_owner"]=	$listorg[$i]["fk_user_owner"];
			$relist[$i]["namme"]=		$listorg[$i]["name"];
			$relist[$i]["thumb_big"]=	$listorg[$i]["thumb_big"];
			$relist[$i]["thumb_med"]=	$listorg[$i]["thumb_med"];
			$relist[$i]["thumb_small"]=	$listorg[$i]["thumb_small"];
			$relist[$i]["desc"]=	$listorg[$i]["desc"];
			$relist[$i]["status"]=		$listorg[$i]["status"];
			$relist[$i]["create_time"]=	$listorg[$i]["create_time"];
			$relist[$i]["last_updated"]=$listorg[$i]["last_updated"];
//			$relist[$i]["status"]=$array_status[$listorg[$i]["status"]];
			// "admin_status",这个字段数据库没有 意义：管理员审核状态
		}
		$ret = new stdClass;
		if(empty($relist)){$relist = 0;}
		$ret->data = $relist;
		$ret->page = $listorg1->page;
		$ret->size = $listorg1->pageSize;
		$ret->total = $listorg1->totalPage;
		$relist = SJson::encode($ret);	
		return $relist;
	}
	/**
	 * 获取机构信息
	 * @param int $uid userid
	 * @return boolean|array
	 */
	public function getorgByUid($uid){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$user_db = new user_db();
		$get_org = $user_db->getorgByUid($uid);
		$ret = new stdClass;
		$ret->data = $get_org;
		return $ret;
	}
	public function getOrgByOwner($uid){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$user_db = new user_db();
		$get_org = $user_db->getorgByOwner($uid);
		$ret = new stdClass;
		$ret->data = $get_org;
		return $ret;
	}
	public function getorg($oid){
		if (empty($oid) || !is_numeric($oid)) {
			return false;		
		}
		$ret = new stdClass;
		$user_db = new user_db();
		$get_org = $user_db->getorg($oid);
		if(empty($get_org)){
				return false;
		}
		$ret->data = $get_org;
		return $ret;
	}
    //获取机构公告
	public function getOrgAbout($uid){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$user_db = new user_db();
		$get_org = $user_db->getorgAbout($uid);
		$ret = new stdClass;
		$ret->data = $get_org;
		return $ret;
	}
	public function updateOrg($uid,$data){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$uid = (int)$uid;
		$user_db = new user_db();
		$get_org = $user_db->getorgByUid($uid);
		if(empty($get_org)){
			$org_info = array();
			$org_info["fk_user_owner"] = $uid;
			$addorg = $user_db->addorg($org_info);
			if(!$addorg){				
				return false;
			}
		}
		$ret = new stdClass;
		$org =array();
		foreach(self::$array_org_list as $key=>$value){
			if(isset($data[$value])){
				$org[$key] = $data[$value];
			}
		};
		$time = date("Y-m-d H:i:s");
		$org["last_updated"] = $time;
		$set_org = $user_db->updateOrg($uid,$org);
		return $set_org;
	}
	public function updateOrgProfile($uid,$data){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$uid = (int)$uid;
		$user_db = new user_db();
		$org_profile=$user_db->getOrgProfileByUid($uid);
		if(empty($org_profile)){
            $orginfo=$user_db->getOrgByOwner($uid);
			$data["fk_org"] = $orginfo['oid'];
			$data["fk_user_owner"] = $uid;
			return $user_db->addOrgProfile($data);
		}
		$data["last_updated"] = date("Y-m-d H:i:s");
		return $user_db->updateOrgProfile($uid,$data);
	}
	public function getOrgSlide($sid){
		if (empty($sid) || !is_numeric($sid)) {
			return false;		
		}
		$user_db = new user_db();
		$get_org = $user_db->getOrgSlide($sid);
		$ret = new stdClass;
		$ret->data = $get_org;
		return $ret;
	}
	public function getOrgSlideList($uid,$page,$length){
		$user_db = new user_db();
		return $user_db->getOrgSlideList($uid,$page,$length);
	}
	public function addOrgSLide($data){
		$user_db = new user_db();
		$db_ret = $user_db->addOrgSlide($data);
		return $db_ret;
	}
	public function updateOrgSlide($sid,$data){
		if (empty($sid) || !is_numeric($sid)) {
			return false;		
		}
		$user_db = new user_db();
		$db_ret = $user_db->updateOrgSlide($sid,$data);
		return $db_ret;
	}
    public function delOrgSlide($sid){
        if(empty($sid)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->delOrgSlide($sid);
    }
	public function updateOrgLogo($uid,$data){
		if (empty($uid) || !is_numeric($uid)) {
			return false;		
		}
		$user_db = new user_db();
		$db_ret = $user_db->updateOrgLogo($uid,$data);
		return $db_ret;
	}
	public function listOrgUser($oid,$all,$star,$page,$pageSize){
		$user_db = new user_db();
		return $user_db->listOrgUser($oid,$all,$star,$page,$pageSize);
	}
	public function getOrgUserinfo($oid,$uid,$page,$pageSize){
		return user_db::getOrgUserinfo($oid,$uid,$page,$pageSize);
	}
	public function addFav($fdata){
		if (empty($fdata)){
			return false;		
		}
	//	define("DEBUG",true);
		$time = date("Y-m-d H:i:s");
		$data["fk_user"] = $fdata["user_id"];
		$data["fk_course"] = $fdata["course_id"];
		$data["last_updated"] = $time;
		$data["del_fav"] = 0;//为0表示不是删除的数据
		$ret = user_db::addFav($data);

		return $ret;
	}

	public function listFav($cid,$uid,$page,$length){
		//define("DEBUG",true);
		$time = date("Y-m-d H:i:s");
		$user_db = new user_db();
		$ret_fav1 = $user_db->listFav($cid,$uid,$page,$length);
		$ret_fav = $ret_fav1->items;
		if(empty($ret_fav)){$ret_fav = 0;}
		$ret = new stdClass;
		$ret->data = $ret_fav;
		$ret->page = $ret_fav1->page;
		$ret->size = $ret_fav1->pageSize;
		$ret->total = $ret_fav1->totalPage;
		return $ret;
	}
    //添加公告
    public function addNotice($notice_data){
        if(empty($notice_data)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->addNotice($notice_data);
    }
    //修改公告
    public function updateNotice($nid,$notice_data){
        if(empty($notice_data)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->updateNotice($nid,$notice_data);
    }
    //删除公告
    public function delNotice($nid){
        if(empty($nid)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->delNotice($nid);
    }
    //置顶公告
    public function topNotice($nid,$uid){
        if(empty($nid)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->topNotice($nid,$uid);
    }
    //取消置顶公告
    public function noTopNotice($nid){
        if(empty($nid)){
            return false;
        }
        $user_db=new user_db;
        return $user_db->noTopNotice($nid);
    }
    //公告列表
	public function getNoticeList($page,$length,$uid){
		$user_db = new user_db();
		$notice_result = $user_db->getNoticeList($page,$length,$uid);
		if(empty($notice_result)){
            return false;     
        }
        foreach($notice_result->items as $k=>$v){
            $notice_result->items[$k]['notice_title_sub50']=mb_substr($v['notice_title'],0,50,'utf-8').'...';
            $notice_result->items[$k]['notice_title_sub20']=mb_substr($v['notice_title'],0,20,'utf-8').'...';
        }
		$ret = new stdClass;
		$ret->data = $notice_result->items;
		$ret->page = $notice_result->page;
		$ret->size = $notice_result->pageSize;
		$ret->total = $notice_result->totalPage;
		return $ret;
	}
    //获取公告
	public function getNotice($nid){
		if (empty($nid) || !is_numeric($nid)) {
			return false;		
		}
		$ret = new stdClass;
		$user_db = new user_db();
		$get_notice = $user_db->getNotice($nid);
		if(empty($get_notice)){
				return false;
		}
		$ret->data=$get_notice;
		return $ret;
	}
	public function getUserIdBySubDomain($subdomain){
		if (empty($subdomain)){
			return false;		
		}
		$ret = new stdClass;
		$user_db = new user_db();
		$getUserIdBySubDomain = $user_db->getUserIdBySubDomain($subdomain);
		if(empty($getUserIdBySubDomain)){
				return false;
		}
		$ret= $getUserIdBySubDomain;
		return $ret;
	}
	/*
	 *机构设置老师排序
	 */
	public function Usersetsort($oid,$user_id,$newSort){
		$ret = new stdClass;
		//列取机构用户信息
		$teacherSOrtArr =user_db::listOrgUser($oid);
		if(!empty($teacherSOrtArr->items)){
			//获取当前用户信息
			$getorgUserinfo =user_db::getorgUserinfo($oid,$user_id);
			$oldSort = $getorgUserinfo["sort"];
			$maxSort = $teacherSOrtArr->items[0]['sort'];
			$minSort = end($teacherSOrtArr->items)['sort'];
			//判断是正序还是倒叙 预防排序更换
			if($maxSort > $minSort){
				if($newSort>$maxSort) $newSort = $maxSort;
				if($newSort<$minSort) $newSort = $minSort;
				$maxSortdata = $teacherSOrtArr->items[0];
				$minSortdata = end($teacherSOrtArr->items);
			}else{
				if($newSort<$maxSort) $newSort = $maxSort;
				if($newSort>$minSort) $newSort = $minSort;
				$minSortdata = $teacherSOrtArr->items[0];
				$maxSortdata = end($teacherSOrtArr->items);
			}
			//如果输入的排序数字比最大值还大或者比最小值还小就取最大或最小值
			if($newSort >= $oldSort ){
				$uparray = array("`sort` = `sort` - 1");
				$where = array("sort > ".$oldSort);
				$where[] = "sort <= ".$newSort;
				$where["fk_org"] = $oid;
				//define("DEBUG",true);
				$ret1= user_db::setOtherOrgUser($uparray,$where);	
				if($ret1!==false){
					$ret2 = user_db::setorgUsersort($oid,$user_id,$newSort);
				}
			}else{
				$uparray = array("`sort` = `sort` + 1");
				$where = array("sort >= ".$newSort);
				$where[] = "sort < ".$oldSort;
				$where["fk_org"] = $oid;
				//				define("DEBUG",true);
				$ret1= user_db::setOtherOrgUser($uparray,$where);	
				if($ret1!==false){
					$ret2 = user_db::setorgUsersort($oid,$user_id,$newSort);
				}
			}
			if($ret2){
				return $ret2;
			}else{
				$ret->result->code=-2;
				$ret->result->msg="fail updated!";
				return $ret;

			}
		}else{
			$ret->result->code=-3;
			$ret->result->msg="not have data!";
			return $ret;
		}
	}
	public function setTeacherProfile($uid, $params){
		$selarray = array(
			"title"=>"title",
			"college"=>"college",
			"years"=>"years",
			"diploma"=>"diploma",
			"desc"=>"desc",
			"major"=>"major",
			//	""=>"",
		);
		$sel_ret = user_db::getTeacherProfile($uid);
		foreach($selarray as $selk=>$selv){
			if(isset($params->$selk)){
				$params->$selk;
			}else{
				$params->$selk = $sel_ret[$selk];
			}
		}
		$db_ret = user_db::setTeacherProfile($uid,$params);
		return $db_ret;
	}
}

